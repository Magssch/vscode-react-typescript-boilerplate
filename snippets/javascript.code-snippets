{
  "React Functional Component": {
    "prefix": "treact",
    "body": [
      "import React from 'react';",
      "",
      "const ${1:App} = () => {",
      "\treturn (",
      "\t\t<>",
      "\t\t\t${2:}",
      "\t\t</>",
      "\t);",
      "};",
      "",
      "export default ${1:App};"
    ],
    "description": "Create a stateless React Functional Component"
  },

  "React Functional Component with props": {
    "prefix": "treactprops",
    "body": [
      "import React from 'react';",
      "",
      "const ${1:App} = ({ ${2:} }) => {",
      "\treturn (",
      "\t\t<>",
      "\t\t\t${3:}",
      "\t\t</>",
      "\t);",
      "};",
      "",
      "export default ${1:App};"
    ],
    "description": "Create a React Functional Component with props and interface"
  },

  "Typescript React Functional Component with useState and useEffect": {
    "prefix": "treactstate",
    "body": [
      "import React, { useState, useEffect } from 'react';",
      "",
      "const ${1:App} = ({ ${2:} }) => {",
      "\tconst [$3, set${3/(.*)/${1:/capitalize}/}] = useState(${4:${2:}});",
      "\tuseEffect(() => {",
      "\t\t${5:set${3/(.*)/${1:/capitalize}/}(${2:});}",
      "\t}, [${6:${2:}}]);",
      "",
      "\treturn (",
      "\t\t<>",
      "\t\t\t${7:}",
      "\t\t</>",
      "\t);",
      "};",
      "",
      "export default ${1:App};"
    ],
    "description": "Create a Typescript React Functional Component with props, interface and a derived state (imports useEffect and useState)"
  },

  "React memoized Context with Provider component": {
    "prefix": "tcontext",
    "body": [
      "import React, { createContext, useState, useMemo } from 'react';",
      "",
      "export const ${1/(.*)/${1:/capitalize}/}Context = createContext({",
      "\t${1:}: ${2:''},",
      "\tset${1/(.*)/${1:/capitalize}/}: () => {},",
      "});",
      "",
      "const ${1/(.*)/${1:/capitalize}/}Provider = ({ children }) => {",
      "\tconst [${1:}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:''});",
      "\tconst memoizedValue = useMemo(() => ({ ${1:}, set${1/(.*)/${1:/capitalize}/} }), [${1:}]);",
      "",
      "\treturn (",
      "\t\t<${1/(.*)/${1:/capitalize}/}Context.Provider",
      "\t\t\tvalue={{",
      "\t\t\t\t${1:}: memoizedValue.${1:},",
      "\t\t\t\tset${1/(.*)/${1:/capitalize}/}: memoizedValue.set${1/(.*)/${1:/capitalize}/},",
      "\t\t\t}}",
      "\t\t>",
      "\t\t\t{children}",
      "\t\t</${1/(.*)/${1:/capitalize}/}Context.Provider>",
      "\t);",
      "};",
      "",
      "export default ${1/(.*)/${1:/capitalize}/}Provider;"
    ],
    "description": "Create a React Context with memoized state and a Provider component"
  },

  "React useState hook": {
    "prefix": "tstate",
    "body": [
      "const [$1, set${1/(.*)/${1:/capitalize}/}] = useState(${2:\"\"});"
    ],
    "description": "Create a useState hook with explicit type."
  },

  "Typescript React useEffect hook": {
    "prefix": "teffect",
    "body": ["useEffect(() => {", "\t$1", "}, [$2]);"],
    "description": "Create a useEffect hook"
  },

  "Styled Components element": {
    "prefix": "tstyled",
    "body": [
      "const ${2:${1/(.*)/${1:/capitalize}/}} = styled.$1`",
      "\t$3",
      "`;"
    ],
    "description": "Create a Styled Components JSX element"
  },

  "Styled Components styled component wrapper": {
    "prefix": "tstyledcomp",
    "body": [
      "const Styled${1/(.*)/${1:/capitalize}/} = styled($1)`",
      "\t$2",
      "`;"
    ],
    "description": "Create a component wrapper with Styled Components"
  }
}
